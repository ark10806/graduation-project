{"ast":null,"code":"import React from'react';import{CCard,CCardBody,CCardHeader,CCol,CFormLabel,CFormRange,CRow}from'@coreui/react';import{DocsCallout,DocsExample}from'src/components';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Range=function Range(){return/*#__PURE__*/_jsxs(CRow,{children:[/*#__PURE__*/_jsx(CCol,{xs:12,children:/*#__PURE__*/_jsx(DocsCallout,{name:\"Range\",href:\"forms/range\"})}),/*#__PURE__*/_jsx(CCol,{xs:12,children:/*#__PURE__*/_jsxs(CCard,{className:\"mb-4\",children:[/*#__PURE__*/_jsxs(CCardHeader,{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"React Range\"}),\" \",/*#__PURE__*/_jsx(\"small\",{})]}),/*#__PURE__*/_jsxs(CCardBody,{children:[/*#__PURE__*/_jsxs(\"p\",{className:\"text-medium-emphasis small\",children:[\"Create custom \",/*#__PURE__*/_jsx(\"code\",{children:\"<input type=\\\"range\\\">\"}),\" controls with\",' ',/*#__PURE__*/_jsx(\"code\",{children:\"<CFormRange>\"}),\".\"]}),/*#__PURE__*/_jsxs(DocsExample,{href:\"forms/range\",children:[/*#__PURE__*/_jsx(CFormLabel,{htmlFor:\"customRange1\",children:\"Example range\"}),/*#__PURE__*/_jsx(CFormRange,{id:\"customRange1\"})]})]})]})}),/*#__PURE__*/_jsx(CCol,{xs:12,children:/*#__PURE__*/_jsxs(CCard,{className:\"mb-4\",children:[/*#__PURE__*/_jsxs(CCardHeader,{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"React Range\"}),\" \",/*#__PURE__*/_jsx(\"small\",{children:\"Disabled\"})]}),/*#__PURE__*/_jsxs(CCardBody,{children:[/*#__PURE__*/_jsxs(\"p\",{className:\"text-medium-emphasis small\",children:[\"Add the \",/*#__PURE__*/_jsx(\"code\",{children:\"disabled\"}),\" boolean attribute on an input to give it a grayed out appearance and remove pointer events.\"]}),/*#__PURE__*/_jsxs(DocsExample,{href:\"forms/range#disabled\",children:[/*#__PURE__*/_jsx(CFormLabel,{htmlFor:\"disabledRange\",children:\"Disabled range\"}),/*#__PURE__*/_jsx(CFormRange,{id:\"disabledRange\",disabled:true})]})]})]})}),/*#__PURE__*/_jsx(CCol,{xs:12,children:/*#__PURE__*/_jsxs(CCard,{className:\"mb-4\",children:[/*#__PURE__*/_jsxs(CCardHeader,{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"React Range\"}),\" \",/*#__PURE__*/_jsx(\"small\",{children:\"Min and max\"})]}),/*#__PURE__*/_jsxs(CCardBody,{children:[/*#__PURE__*/_jsxs(\"p\",{className:\"text-medium-emphasis small\",children:[\"Range inputs have implicit values for \",/*#__PURE__*/_jsx(\"code\",{children:\"min\"}),\" and \",/*#__PURE__*/_jsx(\"code\",{children:\"max\"}),\"\\u2014\",/*#__PURE__*/_jsx(\"code\",{children:\"0\"}),\" and \",/*#__PURE__*/_jsx(\"code\",{children:\"100\"}),\", respectively. You may specify new values for those using the \",/*#__PURE__*/_jsx(\"code\",{children:\"min\"}),\" and \",/*#__PURE__*/_jsx(\"code\",{children:\"max\"}),\" attributes.\"]}),/*#__PURE__*/_jsxs(DocsExample,{href:\"forms/range#min-and-max\",children:[/*#__PURE__*/_jsx(CFormLabel,{htmlFor:\"customRange2\",children:\"Example range\"}),/*#__PURE__*/_jsx(CFormRange,{min:\"0\",max:\"5\",defaultValue:\"3\",id:\"customRange2\"})]})]})]})}),/*#__PURE__*/_jsx(CCol,{xs:12,children:/*#__PURE__*/_jsxs(CCard,{className:\"mb-4\",children:[/*#__PURE__*/_jsxs(CCardHeader,{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"React Range\"}),\" \",/*#__PURE__*/_jsx(\"small\",{children:\"Steps\"})]}),/*#__PURE__*/_jsxs(CCardBody,{children:[/*#__PURE__*/_jsxs(\"p\",{className:\"text-medium-emphasis small\",children:[\"By default, range inputs \\\"snap\\\" to integer values. To change this, you can specify a \",/*#__PURE__*/_jsx(\"code\",{children:\"step\"}),\" value. In the example below, we double the number of steps by using \",/*#__PURE__*/_jsx(\"code\",{children:\"step=\\\"0.5\\\"\"}),\".\"]}),/*#__PURE__*/_jsxs(DocsExample,{href:\"forms/range#steps\",children:[/*#__PURE__*/_jsx(CFormLabel,{htmlFor:\"customRange3\",children:\"Example range\"}),/*#__PURE__*/_jsx(CFormRange,{min:\"0\",max:\"5\",step:\"0.5\",defaultValue:\"3\",id:\"customRange3\"})]})]})]})})]});};export default Range;","map":{"version":3,"sources":["/home/seungchan/Desktop/Projs/kakao/Kakao_ML/frontend/src/views/forms/range/Range.js"],"names":["React","CCard","CCardBody","CCardHeader","CCol","CFormLabel","CFormRange","CRow","DocsCallout","DocsExample","Range"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,KAAT,CAAgBC,SAAhB,CAA2BC,WAA3B,CAAwCC,IAAxC,CAA8CC,UAA9C,CAA0DC,UAA1D,CAAsEC,IAAtE,KAAkF,eAAlF,CACA,OAASC,WAAT,CAAsBC,WAAtB,KAAyC,gBAAzC,C,wFAEA,GAAMC,CAAAA,KAAK,CAAG,QAARA,CAAAA,KAAQ,EAAM,CAClB,mBACE,MAAC,IAAD,yBACE,KAAC,IAAD,EAAM,EAAE,CAAE,EAAV,uBACE,KAAC,WAAD,EAAa,IAAI,CAAC,OAAlB,CAA0B,IAAI,CAAC,aAA/B,EADF,EADF,cAIE,KAAC,IAAD,EAAM,EAAE,CAAE,EAAV,uBACE,MAAC,KAAD,EAAO,SAAS,CAAC,MAAjB,wBACE,MAAC,WAAD,yBACE,uCADF,kBAC+B,gBAD/B,GADF,cAIE,MAAC,SAAD,yBACE,WAAG,SAAS,CAAC,4BAAb,yCACgB,gDADhB,kBAC8E,GAD9E,cAEE,sCAFF,OADF,cAKE,MAAC,WAAD,EAAa,IAAI,CAAC,aAAlB,wBACE,KAAC,UAAD,EAAY,OAAO,CAAC,cAApB,2BADF,cAEE,KAAC,UAAD,EAAY,EAAE,CAAC,cAAf,EAFF,GALF,GAJF,GADF,EAJF,cAqBE,KAAC,IAAD,EAAM,EAAE,CAAE,EAAV,uBACE,MAAC,KAAD,EAAO,SAAS,CAAC,MAAjB,wBACE,MAAC,WAAD,yBACE,uCADF,kBAC+B,mCAD/B,GADF,cAIE,MAAC,SAAD,yBACE,WAAG,SAAS,CAAC,4BAAb,mCACU,kCADV,kGADF,cAKE,MAAC,WAAD,EAAa,IAAI,CAAC,sBAAlB,wBACE,KAAC,UAAD,EAAY,OAAO,CAAC,eAApB,4BADF,cAEE,KAAC,UAAD,EAAY,EAAE,CAAC,eAAf,CAA+B,QAAQ,KAAvC,EAFF,GALF,GAJF,GADF,EArBF,cAsCE,KAAC,IAAD,EAAM,EAAE,CAAE,EAAV,uBACE,MAAC,KAAD,EAAO,SAAS,CAAC,MAAjB,wBACE,MAAC,WAAD,yBACE,uCADF,kBAC+B,sCAD/B,GADF,cAIE,MAAC,SAAD,yBACE,WAAG,SAAS,CAAC,4BAAb,iEACwC,6BADxC,sBAC6D,6BAD7D,uBAEE,2BAFF,sBAEqB,6BAFrB,gFAGkB,6BAHlB,sBAGuC,6BAHvC,kBADF,cAME,MAAC,WAAD,EAAa,IAAI,CAAC,yBAAlB,wBACE,KAAC,UAAD,EAAY,OAAO,CAAC,cAApB,2BADF,cAEE,KAAC,UAAD,EAAY,GAAG,CAAC,GAAhB,CAAoB,GAAG,CAAC,GAAxB,CAA4B,YAAY,CAAC,GAAzC,CAA6C,EAAE,CAAC,cAAhD,EAFF,GANF,GAJF,GADF,EAtCF,cAwDE,KAAC,IAAD,EAAM,EAAE,CAAE,EAAV,uBACE,MAAC,KAAD,EAAO,SAAS,CAAC,MAAjB,wBACE,MAAC,WAAD,yBACE,uCADF,kBAC+B,gCAD/B,GADF,cAIE,MAAC,SAAD,yBACE,WAAG,SAAS,CAAC,4BAAb,kHAEY,8BAFZ,sFAGW,sCAHX,OADF,cAME,MAAC,WAAD,EAAa,IAAI,CAAC,mBAAlB,wBACE,KAAC,UAAD,EAAY,OAAO,CAAC,cAApB,2BADF,cAEE,KAAC,UAAD,EAAY,GAAG,CAAC,GAAhB,CAAoB,GAAG,CAAC,GAAxB,CAA4B,IAAI,CAAC,KAAjC,CAAuC,YAAY,CAAC,GAApD,CAAwD,EAAE,CAAC,cAA3D,EAFF,GANF,GAJF,GADF,EAxDF,GADF,CA6ED,CA9ED,CAgFA,cAAeA,CAAAA,KAAf","sourcesContent":["import React from 'react'\nimport { CCard, CCardBody, CCardHeader, CCol, CFormLabel, CFormRange, CRow } from '@coreui/react'\nimport { DocsCallout, DocsExample } from 'src/components'\n\nconst Range = () => {\n  return (\n    <CRow>\n      <CCol xs={12}>\n        <DocsCallout name=\"Range\" href=\"forms/range\" />\n      </CCol>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>React Range</strong> <small></small>\n          </CCardHeader>\n          <CCardBody>\n            <p className=\"text-medium-emphasis small\">\n              Create custom <code>&lt;input type=&#34;range&#34;&gt;</code> controls with{' '}\n              <code>&lt;CFormRange&gt;</code>.\n            </p>\n            <DocsExample href=\"forms/range\">\n              <CFormLabel htmlFor=\"customRange1\">Example range</CFormLabel>\n              <CFormRange id=\"customRange1\" />\n            </DocsExample>\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>React Range</strong> <small>Disabled</small>\n          </CCardHeader>\n          <CCardBody>\n            <p className=\"text-medium-emphasis small\">\n              Add the <code>disabled</code> boolean attribute on an input to give it a grayed out\n              appearance and remove pointer events.\n            </p>\n            <DocsExample href=\"forms/range#disabled\">\n              <CFormLabel htmlFor=\"disabledRange\">Disabled range</CFormLabel>\n              <CFormRange id=\"disabledRange\" disabled />\n            </DocsExample>\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>React Range</strong> <small>Min and max</small>\n          </CCardHeader>\n          <CCardBody>\n            <p className=\"text-medium-emphasis small\">\n              Range inputs have implicit values for <code>min</code> and <code>max</code>â€”\n              <code>0</code> and <code>100</code>, respectively. You may specify new values for\n              those using the <code>min</code> and <code>max</code> attributes.\n            </p>\n            <DocsExample href=\"forms/range#min-and-max\">\n              <CFormLabel htmlFor=\"customRange2\">Example range</CFormLabel>\n              <CFormRange min=\"0\" max=\"5\" defaultValue=\"3\" id=\"customRange2\" />\n            </DocsExample>\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>React Range</strong> <small>Steps</small>\n          </CCardHeader>\n          <CCardBody>\n            <p className=\"text-medium-emphasis small\">\n              By default, range inputs &#34;snap&#34; to integer values. To change this, you can\n              specify a <code>step</code> value. In the example below, we double the number of steps\n              by using <code>step=&#34;0.5&#34;</code>.\n            </p>\n            <DocsExample href=\"forms/range#steps\">\n              <CFormLabel htmlFor=\"customRange3\">Example range</CFormLabel>\n              <CFormRange min=\"0\" max=\"5\" step=\"0.5\" defaultValue=\"3\" id=\"customRange3\" />\n            </DocsExample>\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n  )\n}\n\nexport default Range\n"]},"metadata":{},"sourceType":"module"}